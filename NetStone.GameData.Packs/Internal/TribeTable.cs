// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FFXIV
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TribeTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TribeTable GetRootAsTribeTable(ByteBuffer _bb) { return GetRootAsTribeTable(_bb, new TribeTable()); }
  public static TribeTable GetRootAsTribeTable(ByteBuffer _bb, TribeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TribeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FFXIV.Tribe? Tribes(int j) { int o = __p.__offset(4); return o != 0 ? (FFXIV.Tribe?)(new FFXIV.Tribe()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TribesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public FFXIV.Tribe? TribesByKey(uint key) { int o = __p.__offset(4); return o != 0 ? FFXIV.Tribe.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<FFXIV.TribeTable> CreateTribeTable(FlatBufferBuilder builder,
      VectorOffset TribesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TribeTable.AddTribes(builder, TribesOffset);
    return TribeTable.EndTribeTable(builder);
  }

  public static void StartTribeTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTribes(FlatBufferBuilder builder, VectorOffset TribesOffset) { builder.AddOffset(0, TribesOffset.Value, 0); }
  public static VectorOffset CreateTribesVector(FlatBufferBuilder builder, Offset<FFXIV.Tribe>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTribesVectorBlock(FlatBufferBuilder builder, Offset<FFXIV.Tribe>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTribesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<FFXIV.TribeTable> EndTribeTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FFXIV.TribeTable>(o);
  }
  public static void FinishTribeTableBuffer(FlatBufferBuilder builder, Offset<FFXIV.TribeTable> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTribeTableBuffer(FlatBufferBuilder builder, Offset<FFXIV.TribeTable> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct Tribe : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Tribe GetRootAsTribe(ByteBuffer _bb) { return GetRootAsTribe(_bb, new Tribe()); }
  public static Tribe GetRootAsTribe(ByteBuffer _bb, Tribe obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Tribe __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string NameMasculineEn { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameMasculineEnBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameMasculineEnBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameMasculineEnArray() { return __p.__vector_as_array<byte>(6); }
  public string NameMasculineFr { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameMasculineFrBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameMasculineFrBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameMasculineFrArray() { return __p.__vector_as_array<byte>(8); }
  public string NameMasculineDe { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameMasculineDeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameMasculineDeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameMasculineDeArray() { return __p.__vector_as_array<byte>(10); }
  public string NameMasculineJa { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameMasculineJaBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameMasculineJaBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameMasculineJaArray() { return __p.__vector_as_array<byte>(12); }
  public string NameFeminineEn { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameFeminineEnBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNameFeminineEnBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNameFeminineEnArray() { return __p.__vector_as_array<byte>(14); }
  public string NameFeminineFr { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameFeminineFrBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameFeminineFrBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameFeminineFrArray() { return __p.__vector_as_array<byte>(16); }
  public string NameFeminineDe { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameFeminineDeBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNameFeminineDeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNameFeminineDeArray() { return __p.__vector_as_array<byte>(18); }
  public string NameFeminineJa { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameFeminineJaBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNameFeminineJaBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNameFeminineJaArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<FFXIV.Tribe> CreateTribe(FlatBufferBuilder builder,
      uint Id = 0,
      StringOffset NameMasculineEnOffset = default(StringOffset),
      StringOffset NameMasculineFrOffset = default(StringOffset),
      StringOffset NameMasculineDeOffset = default(StringOffset),
      StringOffset NameMasculineJaOffset = default(StringOffset),
      StringOffset NameFeminineEnOffset = default(StringOffset),
      StringOffset NameFeminineFrOffset = default(StringOffset),
      StringOffset NameFeminineDeOffset = default(StringOffset),
      StringOffset NameFeminineJaOffset = default(StringOffset)) {
    builder.StartTable(9);
    Tribe.AddNameFeminineJa(builder, NameFeminineJaOffset);
    Tribe.AddNameFeminineDe(builder, NameFeminineDeOffset);
    Tribe.AddNameFeminineFr(builder, NameFeminineFrOffset);
    Tribe.AddNameFeminineEn(builder, NameFeminineEnOffset);
    Tribe.AddNameMasculineJa(builder, NameMasculineJaOffset);
    Tribe.AddNameMasculineDe(builder, NameMasculineDeOffset);
    Tribe.AddNameMasculineFr(builder, NameMasculineFrOffset);
    Tribe.AddNameMasculineEn(builder, NameMasculineEnOffset);
    Tribe.AddId(builder, Id);
    return Tribe.EndTribe(builder);
  }

  public static void StartTribe(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, uint Id) { builder.AddUint(0, Id, 0); }
  public static void AddNameMasculineEn(FlatBufferBuilder builder, StringOffset NameMasculineEnOffset) { builder.AddOffset(1, NameMasculineEnOffset.Value, 0); }
  public static void AddNameMasculineFr(FlatBufferBuilder builder, StringOffset NameMasculineFrOffset) { builder.AddOffset(2, NameMasculineFrOffset.Value, 0); }
  public static void AddNameMasculineDe(FlatBufferBuilder builder, StringOffset NameMasculineDeOffset) { builder.AddOffset(3, NameMasculineDeOffset.Value, 0); }
  public static void AddNameMasculineJa(FlatBufferBuilder builder, StringOffset NameMasculineJaOffset) { builder.AddOffset(4, NameMasculineJaOffset.Value, 0); }
  public static void AddNameFeminineEn(FlatBufferBuilder builder, StringOffset NameFeminineEnOffset) { builder.AddOffset(5, NameFeminineEnOffset.Value, 0); }
  public static void AddNameFeminineFr(FlatBufferBuilder builder, StringOffset NameFeminineFrOffset) { builder.AddOffset(6, NameFeminineFrOffset.Value, 0); }
  public static void AddNameFeminineDe(FlatBufferBuilder builder, StringOffset NameFeminineDeOffset) { builder.AddOffset(7, NameFeminineDeOffset.Value, 0); }
  public static void AddNameFeminineJa(FlatBufferBuilder builder, StringOffset NameFeminineJaOffset) { builder.AddOffset(8, NameFeminineJaOffset.Value, 0); }
  public static Offset<FFXIV.Tribe> EndTribe(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FFXIV.Tribe>(o);
  }

  public static VectorOffset CreateSortedVectorOfTribe(FlatBufferBuilder builder, Offset<Tribe>[] offsets) {
    Array.Sort(offsets, (Offset<Tribe> o1, Offset<Tribe> o2) => builder.DataBuffer.GetUint(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetUint(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Tribe? __lookup_by_key(int vectorLocation, uint key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetUint(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Tribe().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
